{"version":3,"sources":["../src/keycloak-auth.ts"],"sourcesContent":["import type { KeycloakInitOptions, KeycloakInstance } from 'keycloak-js'\nimport keycloakJS from 'keycloak-js'\n\nimport configuration from 'shared/services/configuration/configuration'\n\nconst OAUTH_DOMAIN_KEY = 'oauthDomain' // Domain that is used for login\n\nclass Keycloak {\n  private keycloak: KeycloakInstance\n  private refreshIntervalId: number | null = null\n  private storage: Storage\n\n  constructor() {\n    this.storage = window.localStorage || window.sessionStorage\n    this.keycloak = keycloakJS({\n      clientId: configuration.oidc.clientId,\n      realm: (configuration.oidc as any).realm as string,\n      url: configuration.oidc.authEndpoint,\n    })\n\n    this.keycloak.onAuthSuccess = this.startRefreshInterval.bind(this)\n    this.keycloak.onAuthRefreshError = this.stopRefreshInterval.bind(this)\n    this.keycloak.onAuthError = this.stopRefreshInterval.bind(this)\n    this.keycloak.onAuthLogout = this.stopRefreshInterval.bind(this)\n    this.keycloak.onTokenExpired = this.handleExpiredToken.bind(this)\n  }\n\n  async init() {\n    const options: KeycloakInitOptions = {\n      flow: 'standard', // Standard = code flow\n      checkLoginIframe: false, // To keep user logged in, use refresh token instead of (silent) redirect\n      pkceMethod: 'S256',\n      useNonce: true,\n    }\n\n    /**\n     *  If the oauth domain key is set to 'keycloak', this device logged in previously and SSO should be checked.\n     *  For browsers that do not support silent checking (Safari) a redirect will be preformed instead.\n     */\n    if (this.storage.getItem(OAUTH_DOMAIN_KEY) === 'keycloak') {\n      options.onLoad = 'check-sso'\n    }\n\n    return this.keycloak.init(options)\n  }\n\n  async authenticate() {\n    await this.init()\n\n    if (this.getIsAuthenticated()) {\n      const accessToken = this.getAccessToken()\n\n      return accessToken ? { accessToken } : null\n    }\n\n    return null\n  }\n\n  getIsAuthenticated(): boolean {\n    return Boolean(\n      this.keycloak.authenticated && !this.keycloak.isTokenExpired()\n    )\n  }\n\n  getAuthHeaders(): {\n    Authorization?: string\n  } {\n    const token = this.getAccessToken()\n\n    return token ? { Authorization: `Bearer ${token}` } : {}\n  }\n\n  getAccessToken(): string | null {\n    return this.keycloak.token || null\n  }\n\n  login() {\n    this.storage.setItem(OAUTH_DOMAIN_KEY, 'keycloak')\n\n    this.keycloak.login({\n      scope: configuration.oidc.scope,\n    })\n  }\n\n  logout() {\n    this.storage.removeItem(OAUTH_DOMAIN_KEY)\n\n    this.keycloak.logout()\n  }\n\n  startRefreshInterval() {\n    // Refresh the access token periodically\n    const minValidity = 120 // Token should be valid for at least the next 2 minutes\n    const updateInterval = 60 // Keep token valid by checking every minute\n\n    // Start a token updater, if not yet running\n    if (!this.refreshIntervalId) {\n      this.refreshIntervalId = setInterval(() => {\n        this.keycloak.updateToken(minValidity)\n      }, updateInterval * 1000) as unknown as number\n    }\n  }\n\n  stopRefreshInterval() {\n    if (this.refreshIntervalId !== null) {\n      clearInterval(this.refreshIntervalId)\n      this.refreshIntervalId = null\n    }\n  }\n\n  handleExpiredToken() {\n    // This should never happen (refresh interval should keep token valid)\n    this.stopRefreshInterval()\n    this.logout()\n  }\n}\n\nexport default Keycloak\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,yBAAuB;AAEvB,2BAA0B;AAE1B,MAAM,mBAAmB;AAEzB,MAAM,SAAS;AAAA,EAKb,cAAc;AAJd,wBAAQ;AACR,wBAAQ,qBAAmC;AAC3C,wBAAQ;AAGN,SAAK,UAAU,OAAO,gBAAgB,OAAO;AAC7C,SAAK,eAAW,mBAAAA,SAAW;AAAA,MACzB,UAAU,qBAAAC,QAAc,KAAK;AAAA,MAC7B,OAAQ,qBAAAA,QAAc,KAAa;AAAA,MACnC,KAAK,qBAAAA,QAAc,KAAK;AAAA,IAC1B,CAAC;AAED,SAAK,SAAS,gBAAgB,KAAK,qBAAqB,KAAK,IAAI;AACjE,SAAK,SAAS,qBAAqB,KAAK,oBAAoB,KAAK,IAAI;AACrE,SAAK,SAAS,cAAc,KAAK,oBAAoB,KAAK,IAAI;AAC9D,SAAK,SAAS,eAAe,KAAK,oBAAoB,KAAK,IAAI;AAC/D,SAAK,SAAS,iBAAiB,KAAK,mBAAmB,KAAK,IAAI;AAAA,EAClE;AAAA,EAEA,MAAM,OAAO;AACX,UAAM,UAA+B;AAAA,MACnC,MAAM;AAAA;AAAA,MACN,kBAAkB;AAAA;AAAA,MAClB,YAAY;AAAA,MACZ,UAAU;AAAA,IACZ;AAMA,QAAI,KAAK,QAAQ,QAAQ,gBAAgB,MAAM,YAAY;AACzD,cAAQ,SAAS;AAAA,IACnB;AAEA,WAAO,KAAK,SAAS,KAAK,OAAO;AAAA,EACnC;AAAA,EAEA,MAAM,eAAe;AACnB,UAAM,KAAK,KAAK;AAEhB,QAAI,KAAK,mBAAmB,GAAG;AAC7B,YAAM,cAAc,KAAK,eAAe;AAExC,aAAO,cAAc,EAAE,YAAY,IAAI;AAAA,IACzC;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,qBAA8B;AAC5B,WAAO;AAAA,MACL,KAAK,SAAS,iBAAiB,CAAC,KAAK,SAAS,eAAe;AAAA,IAC/D;AAAA,EACF;AAAA,EAEA,iBAEE;AACA,UAAM,QAAQ,KAAK,eAAe;AAElC,WAAO,QAAQ,EAAE,eAAe,UAAU,QAAQ,IAAI,CAAC;AAAA,EACzD;AAAA,EAEA,iBAAgC;AAC9B,WAAO,KAAK,SAAS,SAAS;AAAA,EAChC;AAAA,EAEA,QAAQ;AACN,SAAK,QAAQ,QAAQ,kBAAkB,UAAU;AAEjD,SAAK,SAAS,MAAM;AAAA,MAClB,OAAO,qBAAAA,QAAc,KAAK;AAAA,IAC5B,CAAC;AAAA,EACH;AAAA,EAEA,SAAS;AACP,SAAK,QAAQ,WAAW,gBAAgB;AAExC,SAAK,SAAS,OAAO;AAAA,EACvB;AAAA,EAEA,uBAAuB;AAErB,UAAM,cAAc;AACpB,UAAM,iBAAiB;AAGvB,QAAI,CAAC,KAAK,mBAAmB;AAC3B,WAAK,oBAAoB,YAAY,MAAM;AACzC,aAAK,SAAS,YAAY,WAAW;AAAA,MACvC,GAAG,iBAAiB,GAAI;AAAA,IAC1B;AAAA,EACF;AAAA,EAEA,sBAAsB;AACpB,QAAI,KAAK,sBAAsB,MAAM;AACnC,oBAAc,KAAK,iBAAiB;AACpC,WAAK,oBAAoB;AAAA,IAC3B;AAAA,EACF;AAAA,EAEA,qBAAqB;AAEnB,SAAK,oBAAoB;AACzB,SAAK,OAAO;AAAA,EACd;AACF;AAEA,IAAO,wBAAQ;","names":["keycloakJS","configuration"]}